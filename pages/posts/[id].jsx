import { useState } from 'react';
import Head from 'next/head'
import { useRouter } from "next/router";

// react query
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'

// api
import { getPostDetails, updatePost, deletePost } from '../api/postsApi'
import Loading from '../components/loading/Loading'
import {
    Box,
    Text,
    Button,
    FormControl,
    FormLabel,
    Input,
    Textarea,
    ButtonGroup,
} from '@chakra-ui/react';

// hook form
import { useForm } from "react-hook-form";

// sweetalert
import swal from 'sweetalert'

const PostDetails = () => {

    const queryClient = useQueryClient()
    const router = useRouter();
    const id = router.query["id"];
    const [isEdit, setIsEdit] = useState(false);

    const {
        isLoading,
        isError,
        error,
        data: post
    } = useQuery(['posts', id], () => getPostDetails(id), {
        enabled: id !== undefined
    })

    const updatePostMutation = useMutation(updatePost, {
        onSuccess: () => {
            // Invalidates cache and refetch
            queryClient.invalidateQueries("posts")
            swal({
                title: "Success",
                text: 'Success update a post',
                icon: "success",
            });
        }
    })

    const deletePostMutation = useMutation(deletePost, {
        onSuccess: () => {
            // Invalidates cache and refetch
            queryClient.invalidateQueries("posts")
        }
    })

    let content
    if (isLoading) {
        content = <Loading />
    } else if (isError) {
        content = <p>{error.message}</p>
    } else {
        content = <>
            <Text fontSize={'4xl'}>
                {post.title}
            </Text>
            <Text fontSize={'xl'} mt={10}>
                {post.body}
            </Text>

            <Button mt={10} onClick={() => setIsEdit(!isEdit)}>Edit</Button>
        </>
    }

    // Hook Form
    const {
        register,
        handleSubmit,
        formState: { errors, isSubmitting }, }
        = useForm();

    const onSubmit = values => {
        return new Promise((resolve) => {
            setTimeout(() => {
                updatePostMutation.mutate({ ...post, ...values })
                resolve()
            }, 2000)
        })
    }

    const handleDeletePost = (id) => {

        swal({
            title: "Are you sure?",
            text: `This post will be deleted`,
            icon: "warning",
            buttons: true,
            dangerMode: true
        }).then(async (isOkay) => {
            if (isOkay) {
                deletePostMutation.mutate(id)

                swal({
                    title: "Succes",
                    text: `A post has been deleted`,
                    icon: "success",
                })

                router.push('/posts')
            } else {
                swal({
                    title: 'warning',
                    text: `The post still in your posts list`,
                    icon: 'warning',
                });
            }
        })
    }

    return (
        <>
            <Head>
                <title>{post ? post.title : 'Post'}</title>
                <meta name="description" content="Generated by Informatika Media Pratama" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Box padding={10}>
                {content}
                {
                    isEdit &&
                    <Box mt={5}>
                        <form onSubmit={handleSubmit(onSubmit)}>
                            <FormControl isInvalid={errors.name}>
                                <FormLabel htmlFor='title'>Title</FormLabel>
                                <Input
                                    id='title'
                                    defaultValue={post.title}
                                    placeholder='Title'
                                    {...register('title', {
                                        required: 'Title is required',
                                        minLength: { value: 4, message: 'Minimum length should be 4' },
                                    })}
                                />
                                <Text color={'red'} mt={1}>
                                    {errors.title && errors.title.message}
                                </Text>
                            </FormControl>
                            <FormControl isInvalid={errors.name}>
                                <FormLabel htmlFor='body'>Body</FormLabel>
                                <Textarea
                                    id='body'
                                    defaultValue={post.body}
                                    placeholder='Lorem ipsum....'
                                    {...register('body', {
                                        required: 'Body is required',
                                        minLength: { value: 4, message: 'Minimum length should be 4 characters' },
                                    })}
                                />
                                <Text color={'red'} mt={1}>
                                    {errors.body && errors.body.message}
                                </Text>
                            </FormControl>
                            <ButtonGroup width={'100%'} mt={4} justifyContent={'space-between'}>
                                <Button colorScheme='blue' isLoading={isSubmitting} type='submit'>
                                    Update
                                </Button>
                                <Button
                                    onClick={() => handleDeletePost(post.id)}
                                >
                                    Delete
                                </Button>
                            </ButtonGroup>
                        </form>
                    </Box>
                }
            </Box>
        </>
    )
}

export default PostDetails